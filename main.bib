
@misc{panic9,
    title = {panic(9) â€” Kernel Developer's Manual},
    howpublished = {\url{
                    https://man.freebsd.org/cgi/man.cgi?query=panic&sektion=9}},
    note = {Accessed: 31 March 2025},
    year = {2025},
}

@article{10.1145/3214304,
    author = {Liu, Ming and Xue, Zhi and Xu, Xianghua and Zhong, Changmin and
              Chen, Jinjun},
    title = {Host-Based Intrusion Detection System with System Calls: Review and
             Future Trends},
    year = {2018},
    issue_date = {September 2019},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {51},
    number = {5},
    issn = {0360-0300},
    url = {https://doi.org/10.1145/3214304},
    doi = {10.1145/3214304},
    abstract = {In a contemporary data center, Linux applications often generate
                a large quantity of real-time system call traces, which are not
                suitable for traditional host-based intrusion detection systems
                deployed on every single host. Training data mining models with
                system calls on a single host that has static computing and
                storage capacity is time-consuming, and intermediate datasets are
                not capable of being efficiently handled. It is cumbersome for
                the maintenance and updating of host-based intrusion detection
                systems (HIDS) installed on every physical or virtual host, and
                comprehensive system call analysis can hardly be performed to
                detect complex and distributed attacks among multiple hosts.
                Considering these limitations of current system-call-based HIDS,
                in this article, we provide a review of the development of
                system-call-based HIDS and future research trends. Algorithms and
                techniques relevant to system-call-based HIDS are investigated,
                including feature extraction methods and various data mining
                algorithms. The HIDS dataset issues are discussed, including
                currently available datasets with system calls and approaches for
                researchers to generate new datasets. The application of
                system-call-based HIDS on current embedded systems is studied,
                and related works are investigated. Finally, future research
                trends are forecast regarding three aspects, namely, the
                reduction of the false-positive rate, the improvement of
                detection efficiency, and the enhancement of collaborative
                security.},
    journal = {ACM Comput. Surv.},
    month = nov,
    articleno = {98},
    numpages = {36},
    keywords = {Cybersecurity, big data, cloud computing, intrusion detection,
                system call},
}

@misc{rustbook_unsafe,
    author = {{The Rust Project Developers}},
    title = {The Rust Programming Language: Unsafe Rust},
    year = { 2025 },
    url = {https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html},
    note = {Accessed: 2025-03-31},
}

@inproceedings{SOK,
    title = {SoK: Software Compartmentalization},
    author = {Lefeuvre, Hugo and Dautenhahn, Nathan and Chisnall, David and
              Olivier, Pierre},
    booktitle = {46th IEEE Symposium on Security and Privacy (S\&P'25)},
    year = {2024},
}

@inproceedings{ANDROID_SOK,
    author = {Acar, Yasemin and Backes, Michael and Bugiel, Sven and Fahl,
              Sascha and McDaniel, Patrick and Smith, Matthew},
    booktitle = {Proceedings of the 2016 IEEE Symposium on Security and Privacy},
    title = {{SoK}: Lessons Learned from {Android} Security Research for
             Appified Software Platforms},
    year = {2016},
    series = {S\&P'16},
    doi = {10.1109/SP.2016.33},
    file = {:papers/Acar2016.pdf:PDF},
    groups = {SoKs, Isolation},
}

@inproceedings{PRIVMAN,
    author = {Kilpatrick, Douglas},
    booktitle = {Proc. of the 2003 {USENIX} Annual Technical Conference},
    title = {Privman: A Library for Partitioning Applications.},
    series = {ATC'03},
    file = {:papers/Kilpatrick2003.pdf:PDF},
    groups = {App Isolation, Isolation},
}

% @inproceedings{WEDGE,
    % = author,
}= {Bittau, Andrea and Marchenko, Petr and Handley, Mark and Karp,
%               Brad},
%     booktitle = {Proc. of the 5th USENIX Symposium on Networked Systems Design
%                  and Implementation},
%     title = {Wedge: Splitting Applications into Reduced-Privilege Compartments},
%     year = {2008},
%     publisher = {USENIX},
%     series = {NSDI'08},
%     abstract = {Software vulnerabilities and bugs persist, and so exploits
%                 continue to cause significant damage, particularly by divulging
%                 users' sensitive data to miscreants. Yet the vast majority of
%                 networked applications remain monolithically structured, in stark
%                 contravention of the ideal of least-privilege partitioning. Like
%                 others before us, we believe this state of affairs continues
%                 because today's operating systems offer isolation primitives that
%                 are cumbersome. We present Wedge, a system well suited to the
%                 splitting of complex, legacy, monolithic applications into
%                 fine-grained, least-privilege compartments. Wedge consists of two
%                 synergistic parts: OS primitives that create compartments with
%                 default-deny semantics, which force the programmer to make
%                 compartments' privileges explicit; and Crowbar, a pair of
%                 run-time analysis tools that assist the programmer in determining
%                 which code needs which privileges for which memory objects. By
%                 implementing the Wedge system atop Linux, and applying it to the
%                 SSL-enabled Apache web server and the OpenSSH login server, we
%                 demonstrate that Wedge allows fine-grained compartmentalization
%                 of applications to prevent the leakage of sensitive data, at
%                 acceptable performance cost. We further show that Wedge is
%                 powerful enough to prevent a subtle man-in-the-middle attack that
%                 succeeds on a more coarsely privilege-separated Apache web
%                 server.},
%     file = {:papers/Bittau2008.pdf:PDF},
%     groups = {Isolation, App Isolation},
%     isbn = {1119995555221},
%     location = {San Francisco, California},
%     numpages = {14},
% }
%
% @inproceedings{SOAAP,
    % = author,
}= {Gudka, Khilan and Watson, Robert N.M. and Anderson, Jonathan and
%               Chisnall, David and Davis, Brooks and Laurie, Ben and Marinos,
%               Ilias and Neumann, Peter G. and Richardson, Alex},
%     booktitle = {Proc. of the 22nd ACM SIGSAC Conference on Computer and
%                  Communications Security},
%     title = {Clean Application Compartmentalization with SOAAP},
%     year = {2015},
%     publisher = {ACM},
%     series = {CCS'15},
%     abstract = {Application compartmentalization, a vulnerability mitigation
%                 technique employed in programs such as OpenSSH and the Chromium
%                 web browser, decomposes software into isolated components to
%                 limit privileges leaked or otherwise available to attackers.
%                 However, compartmentalizing applications -- and maintaining that
%                 compartmentalization -- is hindered by ad hoc methodologies and
%                 significantly increased programming effort. In practice,
%                 programmers stumble through (rather than overtly reason about)
%                 compartmentalization spaces of possible decompositions,
%                 unknowingly trading off correctness, security, complexity, and
%                 performance. We present a new conceptual framework embodied in an
%                 LLVM-based tool: the Security-Oriented Analysis of Application
%                 Programs (SOAAP) that allows programmers to reason about
%                 compartmentalization using source-code annotations
%                 (compartmentalization hypotheses). We demonstrate considerable
%                 benefit when creating new compartmentalizations for complex
%                 applications, and analyze existing compartmentalized applications
%                 to discover design faults and maintenance issues arising from
%                 application evolution.},
%     doi = {10.1145/2810103.2813611},
%     file = {:/home/hle/Documents/PhD/papers/Gudka2015.pdf:PDF},
%     groups = {Isolation, App Isolation},
%     isbn = {9781450338325},
%     keywords = {vulnerability mitigation, compartmentalization, security},
%     location = {Denver, Colorado, USA},
%     numpages = {16},
%     url = {https://doi.org/10.1145/2810103.2813611},
% }
%
% @inproceedings{CODEJAIL,
    % = author,
}= {Wu, Yongzheng and Sathyanarayan, Sai and Yap, Roland H. C. and
%               Liang, Zhenkai},
%     booktitle = {Proc. of the 17th European Symposium on Research in Computer
%                  Security},
%     title = {Codejail: Application-Transparent Isolation of Libraries with Tight
%              Program Interactions},
%     year = {2012},
%     editor = {Foresti, Sara and Yung, Moti and Martinelli, Fabio},
%     publisher = {Springer Berlin Heidelberg},
%     abstract = {Dynamically linked libraries are commonly used in software
%                 programs to facilitate code reuse. Once a library is linked into
%                 a software program, a bug in the library can lead to compromise
%                 of the whole program. Moreover, the library may also contain
%                 malicious code. Existing solutions for software component
%                 isolation assume simple interactions between a library and the
%                 main program, otherwise, they require significant modification of
%                 the main program and the library. In this paper, we propose a
%                 novel solution, Codejail, which supports a partial isolation of
%                 libraries that have tight memory interactions with the main
%                 program. Codejail requires no modification to the main program or
%                 the library. We demonstrate using a Linux prototype that Codejail
%                 can work easily with real-world programs and libraries. The
%                 performance is good for a portable implementation with costs
%                 commensurate with the degree of tight interaction.},
%     file = {:/home/hle/Documents/PhD/papers/Wu2012.pdf:PDF},
%     groups = {App Isolation},
%     isbn = {978-3-642-33167-1},
% }
%
% @inproceedings{QSYM,
    % = title,
}= {QSYM: A practical concolic execution engine tailored for hybrid
%              fuzzing},
%     author = {Yun, Insu and Lee, Sangho and Xu, Meng and Jang, Yeongjin and Kim,
%               Taesoo},
%     booktitle = {27th USENIX Security Symposium (USENIX Security 18)},
%     pages = {745--761},
%     year = {2018},
% }
%
% @inproceedings{RLBOX,
    % = title,
}= {Retrofitting fine grain isolation in the Firefox renderer},
%     author = {Narayan, Shravan and Disselkoen, Craig and Garfinkel, Tal and
%               Froyd, Nathan and Rahm, Eric and Lerner, Sorin and Shacham, Hovav
%               and Stefan, Deian},
%     booktitle = {29th USENIX Security Symposium (USENIX Security 20)},
%     pages = {699--716},
%     year = {2020},
% }
%
% @inproceedings{PTRSPLIT,
    % = title,
}= {Ptrsplit: Supporting general pointers in automatic program
%              partitioning},
%     author = {Liu, Shen and Tan, Gang and Jaeger, Trent},
%     booktitle = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and
%                  Communications Security},
%     pages = {2359--2371},
%     year = {2017},
% }

@incollection{CONFFUZZ,
    title = {Assessing the Impact of Interface Vulnerabilities in
             Compartmentalized Software},
    author = {Lefeuvre, Hugo and B{\u{a}}doiu, Vlad-Andrei and Chien, Yi and
              Huici, Felipe and Dautenhahn, Nathan and Olivier, Pierre},
    booktitle = {Proceedings of 30th Network and Distributed System Security
                 (NDSS'23)},
    year = {2022},
    publisher = {Internet Society},
}

% @inproceedings{PRIVTRANS,
    % = author,
}= {Brumley, David and Song, Dawn},
%     booktitle = {Proc. of the 13th Conference on USENIX Security Symposium},
%     title = {Privtrans: Automatically Partitioning Programs for Privilege
%              Separation},
%     series = {USENIX Security'04},
%     abstract = {Privilege separation partitions a single program into two parts:
%                 a privileged program called the monitor and an unprivileged
%                 program called the slave. All trust and privileges are relegated
%                 to the monitor, which results in a smaller and more easily
%                 secured trust base. Previously the privilege separation procedure
%                 , i.e., partitioning one program into the monitor and slave, was
%                 done by hand [18, 28]. We design techniques and develop a tool
%                 called Privtrans that allows us to automatically integrate
%                 privilege separation into source code, provided a few programmer
%                 annotations. For instance, our approach can automatically
%                 integrate the privilege separation previously done by hand in
%                 OpenSSH, while enjoying similar security benefits. Additionally,
%                 we propose optimization techniques that augment static analysis
%                 with dynamic information. Our optimization techniques reduce the
%                 number of expensive calls made by the slave to the monitor. We
%                 show Privtrans is effective by integrating privilege separation
%                 into several open-source applications.},
%     file = {:papers/Brumley2004.pdf:PDF},
%     groups = {Isolation, App Isolation},
%     location = {San Diego, CA},
%     numpages = {1},
% }
%
% @inproceedings{LIEDTKE,
    % = author,
}= {Liedtke, J.},
%     booktitle = {Proc. of the 15th ACM Symposium on Operating Systems Principles
%                  },
%     title = {On Micro-Kernel Construction},
%     publisher = {ACM},
%     series = {SOSP'95},
%     doi = {10.1145/224056.224075},
%     file = {:papers/Liedtke1995.pdf:PDF},
%     groups = {Microkernels},
%     isbn = {0897917154},
%     location = {Copper Mountain, Colorado, USA},
%     numpages = {14},
%     url = {https://doi.org/10.1145/224056.224075},
% }
%
% @inproceedings{ERIM,
    % = author,
}= {Anjo Vahldiek-Oberwagner and Eslam Elnikety and Nuno O. Duarte and
%               Michael Sammler and Peter Druschel and Deepak Garg},
%     booktitle = {Proc. of the 28th {USENIX} Security Symposium},
%     title = {{ERIM}: Secure, Efficient In-process Isolation with Protection Keys
%              },
%     series = {USENIX Security'19},
%     file = {:/home/hle/Documents/PhD/papers/VahldiekOberwagner2019.pdf:PDF},
%     groups = {Isolation, App Isolation},
%     isbn = {978-1-939133-06-9},
%     url = {
%            https://www.usenix.org/conference/usenixsecurity19/presentation/vahldiek-oberwagner
%            },
% }
%
% @inproceedings{MILBURN,
    % = author,
}= {Milburn, Alyssa and Van Der Kouwe, Erik and Giuffrida, Cristiano},
%     booktitle = {2022 IEEE Symp. on Security and Privacy},
%     title = {Mitigating Information Leakage Vulnerabilities with Type-based Data
%              Isolation},
%     series = {S\&P'22},
%     doi = {10.1109/SP46214.2022.9833675},
%     file = {:papers/Milburn2022.pdf:PDF},
%     groups = {Isolation, App Isolation},
% }
%
% @inproceedings{BREAKAPP,
    % = author,
}= {Vasilakis, Nikos and Karel, Ben and Roessler, Nick and Dautenhahn,
%               Nathan and DeHon, Andr{\'e} and Smith, Jonathan M.},
%     booktitle = {Proc. of the 25th Annual Network \& Distributed System Security
%                  Symposium},
%     title = {{BreakApp}: Automated, Flexible Application Compartmentalization},
%     year = {2018},
%     series = {NDSS'18},
%     doi = {10.14722/ndss.2018.23131},
%     file = {:/home/hle/Documents/PhD/papers/Vasilakis2018.pdf:PDF},
%     groups = {Isolation, App Isolation},
%     keywords = {Compartmentalization, Least-Privilege Separation, Modules,
%                 Packages, Security},
%     location = {San Diego, California},
%     url = {http://dx.doi.org/10.14722/ndss.2018.23131},
% }
%
% @article{POLP,
    % = title,
}= {The protection of information in computer systems},
%     author = {Saltzer, Jerome H and Schroeder, Michael D},
%     journal = {Proceedings of the IEEE},
%     volume = {63},
%     number = {9},
%     pages = {1278--1308},
%     year = {1975},
%     publisher = {IEEE},
% }

@inproceedings{MPK,
    title = {libmpk: Software abstraction for intel memory protection keys
             (intel MPK)},
    author = {Park, Soyeon and Lee, Sangho and Xu, Wen and Moon, Hyungon and Kim
              , Taesoo},
    booktitle = {2019 USENIX Annual Technical Conference (USENIX ATC 19)},
    pages = {241--254},
    year = {2019},
}

% @article{CHERI,
    % = title,
}= {The CHERI capability model: Revisiting RISC in an age of risk},
%     author = {Woodruff, Jonathan and Watson, Robert NM and Chisnall, David and
%               Moore, Simon W and Anderson, Jonathan and Davis, Brooks and Laurie,
%               Ben and Neumann, Peter G and Norton, Robert and Roe, Michael},
%     journal = {ACM SIGARCH Computer Architecture News},
%     volume = {42},
%     number = {3},
%     pages = {457--468},
%     year = {2014},
%     publisher = {ACM New York, NY, USA},
% }
%
% @inproceedings{PROGRAM_CUTTER,
    % = title,
}= {Automatically partition software into least privilege components
%              using dynamic data dependency analysis},
%     author = {Wu, Yongzheng and Sun, Jun and Liu, Yang and Dong, Jin Song},
%     booktitle = {2013 28th IEEE/ACM International Conference on Automated
%                  Software Engineering (ASE)},
%     pages = {323--333},
%     year = {2013},
%     organization = {IEEE},
% }
%
% @inproceedings{PROGRAM_MANDERING,
    % = title,
}= {Program-mandering: Quantitative privilege separation},
%     author = {Liu, Shen and Zeng, Dongrui and Huang, Yongzhe and Capobianco,
%               Frank and McCamant, Stephen and Jaeger, Trent and Tan, Gang},
%     booktitle = {Proceedings of the 2019 ACM SIGSAC Conference on Computer and
%                  Communications Security},
%     pages = {1023--1040},
%     year = {2019},
% }
%
% @misc{DEBHELPER,
    % = title,
}= {Debian Manpages: \texttt{dh\_auto\_test}},
%     url = {https://manpages.debian.org/testing/debhelper/dh_auto_test.1.en.html},
%     author = {Hess, Joey},
%     year = {2024},
% }
%
% @inproceedings{CALI,
    % = author,
}= {Bauer, Markus and Rossow, Christian},
%     booktitle = {Proc. of the 16th ACM Asia Conference on Computer and
%                  Communications Security (ASIA CCS'21)},
%     title = {Cali: Compiler Assisted Library Isolation},
%     year = {2021},
%     series = {AsiaCCS'21},
%     organization = {ACM},
%     file = {:/home/hle/Documents/PhD/papers/Bauer2021.pdf:PDF},
%     groups = {Isolation, App Isolation},
% }
%
% @inproceedings{LIBHERMITMPK,
    % = author,
}= {Sung, Mincheol and Olivier, Pierre and Lankes, Stefan and
%               Ravindran, Binoy},
%     booktitle = {Proc. of the 16th ACM SIGPLAN/SIGOPS International Conference
%                  on Virtual Execution Environments},
%     title = {Intra-Unikernel Isolation with {Intel Memory Protection Keys}},
%     year = {2020},
%     publisher = {ACM},
%     series = {VEE'20},
% }
%
% @inproceedings{SUD,
    % = author,
}= {Boyd-Wickizer, Silas and Zeldovich, Nickolai},
%     booktitle = {Proc. of the 2010 {USENIX} Annual Technical Conference},
%     title = {Tolerating Malicious Device Drivers in {Linux}},
%     year = {2010},
%     publisher = {USENIX},
%     series = {ATC'10},
%     abstract = {This paper presents SUD, a system for running existing Linux
%                 device drivers as untrusted user-space processes. Even if the
%                 device driver is controlled by a malicious adversary, it cannot
%                 compromise the rest of the system. One significant challenge of
%                 fully isolating a driver is to confine the actions of its
%                 hardware device. SUD relies on IOMMU hardware, PCI express
%                 bridges, and messagesignaled interrupts to confine hardware
%                 devices. SUD runs unmodified Linux device drivers, by emulating a
%                 Linux kernel environment in user-space. A prototype of SUD runs
%                 drivers for Gigabit Ethernet, 802.11 wireless, sound cards, USB
%                 host controllers, and USB devices, and it is easy to add a new
%                 device class. SUD achieves the same performance as an in-kernel
%                 driver on networking benchmarks, and can saturate a Gigabit
%                 Ethernet link. SUD incurs a CPU overhead comparable to existing
%                 runtime driver isolation techniques, while providing much
%                 stronger isolation guarantees for untrusted drivers. Finally, SUD
%                 requires minimal changes to the kernel--just two kernel modules
%                 comprising 4,000 lines of code--which may at last allow the
%                 adoption of these ideas in practice.},
%     file = {:/home/hle/Documents/PhD/papers/BoydWickizer2010.pdf:PDF},
%     groups = {Linux, Isolation},
%     location = {Boston, MA},
%     numpages = {1},
% }


@book{UNDERSTANDING_LINUX_KERNEL,
    title = {Understanding the Linux Kernel},
    author = {Bovet, Daniel P. and Cesati, Marco},
    year = {2005},
    publisher = {O'Reilly Media},
    edition = {3rd},
    isbn = {9780596005658},
}


@online{LEARNING_EBPF,
    author = {Liz Rice},
    title = {Learning eBPF: Programming the Linux Kernel for Observability,
             Security, and Networking},
    year = {2023},
    publisher = {O'Reilly Media},
    url = {
           https://learning.oreilly.com/library/view/learning-ebpf/9781098135119/ch01.html#ebpfapostrophes_roots_the_berkeley_pack
           },
    note = {Accessed via O'Reilly Online Learning},
}

@inproceedings{SIDECAR,
    title = {Design patterns for container-based distributed systems},
    author = {Burns, Brendan and Oppenheimer, David},
    booktitle = {8th USENIX Workshop on Hot Topics in Cloud Computing (HotCloud
                 16)},
    year = {2016},
}


@misc{bpf_kfuncs_docs,
    author = {{The Linux Kernel Developers}},
    title = {BPF Kernel Functions (kfuncs) - The Linux Kernel Documentation},
    year = 2025,
    url = {https://docs.kernel.org/bpf/kfuncs.html},
    note = {Accessed: 2025-03-31},
}


@misc{BPF_PACKET_MITIGATION,
    author = {{Tigera, Inc.}},
    title = {{eBPF and XDP Explained}},
    howpublished = {\url{https://www.tigera.io/learn/guides/ebpf/ebpf-xdp/}},
    year = {2024},
    month = {October},
    note = {Accessed: 2025-03-31},
}


@inproceedings{SPECTRE_BPF_MITIGATION,
    series = {RAID â€™24},
    title = {VeriFence: Lightweight and Precise Spectre Defenses for Untrusted
             Linux Kernel Extensions},
    url = {http://dx.doi.org/10.1145/3678890.3678907},
    DOI = {10.1145/3678890.3678907},
    booktitle = {The 27th International Symposium on Research in Attacks,
                 Intrusions and Defenses},
    publisher = {ACM},
    author = {Gerhorst, Luis and Herzog, Henriette and WÃ¤gemann, Peter and Ott,
              Maximilian and Kapitza, RÃ¼diger and HÃ¶nig, Timo},
    year = {2024},
    month = sep,
    pages = {644â€“659},
    collection = {RAID â€™24},
}

@online{BPF_LOOP_COMMIT,
    author = {The Linux Kernel Community},
    title = {bpf: Add bpf\_loop helper},
    year = {2024},
    month = {3},
    day = {12},
    url = {
           https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=e6f2dd0f80674e9d5960337b3e9c2a242441b326
           },
    urldate = {2025-03-31},
    note = {Commit e6f2dd0, Linux kernel Git repository},
}

@online{BPF_VERIFIER_EXPLOIT,
    author = {Google Bug Hunters},
    title = {A Deep Dive into CVE-2023-2163: How We Found and Fixed an eBPF
             Linux Kernel Vulnerability},
    date = {2024-09-15},
    url = {
           https://bughunters.google.com/blog/6303226026131456/a-deep-dive-into-cve-2023-2163-how-we-found-and-fixed-an-ebpf-linux-kernel-vulnerability
           },
    urldate = {2025-03-31},
}


@book{LINUX_NETWORKING_OBSERVABILITY,
    title = {Linux Observability with BPF: Advanced Programming for Performance
             Analysis and Networking},
    author = {Calavera, D. and Fontana, L.},
    isbn = {9781492050179},
    lccn = {2020276779},
    url = {https://books.google.co.uk/books?id=jtS-DwAAQBAJ},
    year = {2019},
    publisher = {O'Reilly Media},
}


@online{CILIUM_BPF_XDP_INTRO,
    title = {Introduction â€” Cilium 1.18.0-dev documentation},
    author = {{Cilium Authors}},
    year = {2024},
    url = {https://docs.cilium.io/en/latest/network/ebpf/intro/},
    note = {Accessed: 2025-04-02},
}


% @online{GREGG_BPF_NOT_SECURITY,
    % = author,
}= {Brendan Gregg},
%     title = {eBPF Observability Tools Are Not Security Tools},
%     year = {2023},
%     month = apr,
%     url = {
%            https://www.brendangregg.com/blog/2023-04-28/ebpf-security-issues.html
%            },
%     note = {Accessed: 2025-04-02},
% }


@unpublished{StarovoitovBPFSecurity,
    author = {Starovoitov, Alexei},
    title = {BPF and Security. Friends and Foes},
    year = {2024},
    note = {Talk presented at the Linux Security Foundation Conference, Location
            },
    url = {https://www.youtube.com/watch?v=kvt4wdXEuRU},
}

@misc{seccompBPF,
    author = {{The Linux Kernel Team}},
    title = {{Seccomp BPF (SECure COMPuting with filters) â€” The Linux Kernel
             Documentation}},
    year = {2019},
    howpublished = {\url{
                    https://www.kernel.org/doc/html/v5.0/userspace-api/seccomp_filter.html
                    }},
    note = {Accessed: 2025-04-02},
}


@misc{arcangeli_seccomp_2005,
    author = {Andrea Arcangeli and Andrew Morton and Linus Torvalds},
    title = {[PATCH] seccomp: secure computing support},
    year = 2005,
    note = {Commit message. Accessed: 2025-03-31},
    url = {
           https://archive.ph/20130415050745/http://git.kernel.org/?p=linux/kernel/git/tglx/history.git;a=commit;h=d949d0ec9c601f2b148bed3cdb5f87c052968554
           },
}

@article{GRID_COMPUTING_INTRO,
    title = {Introduction to grid computing},
    author = {Jacob, Bart and Brown, Michael and Fukui, Kentaro and Trivedi,
              Nihar and others},
    journal = {IBM redbooks},
    pages = {3--6},
    year = {2005},
    publisher = {Citeseer},
}


@misc{MAN_PAGES_SECCOMP,
    author = {{Michael Kerrisk}},
    title = {{seccomp(2) â€” operate on Secure Computing state of the process}},
    howpublished = {\url{https://man7.org/linux/man-pages/man2/seccomp.2.html}},
    note = {Linux manual page},
    year = {2024},
    accessed = {2025-04-02},
}


@online{TORVALDS_ANYONE_USES_SECCOMP,
    author = {Linus Torvalds},
    title = {Re: [PATCH 2/2] x86-64: seccomp: fix 32/64 syscall hole},
    year = {2009},
    month = feb,
    day = {28},
    url = {https://lkml.org/lkml/2009/2/28/129},
    note = {Posted to the Linux Kernel Mailing List (LKML)},
}


@online{android_seccomp_oreo,
    author = {{Android Developers}},
    title = {Seccomp filter in Android O},
    year = {2017},
    url = {
           https://android-developers.googleblog.com/2017/07/seccomp-filter-in-android-o.html
           },
    note = {Accessed: 2025-04-02},
}


@online{docker_seccomp,
    author = {{Docker Documentation}},
    title = {Runtime security with seccomp},
    year = {2023},
    url = {https://docs.docker.com/engine/security/seccomp/},
    note = {Accessed: 2025-04-02},
}


@online{firefox_seccomp,
    author = {Guillaume Destuynder},
    title = {Firefox Seccomp sandbox},
    year = {2012},
    url = {https://wiki.mozilla.org/Security/Sandbox/Seccomp},
    note = {Accessed: 2025-04-02},
}


@book{LINUX_PROGRAMMING_INTERFACE,
    author = {Michael Kerrisk},
    title = {The Linux Programming Interface: A Linux and UNIX System
             Programming Handbook},
    year = {2010},
    publisher = {No Starch Press},
    location = {San Francisco},
    isbn = {9781593272203},
}
